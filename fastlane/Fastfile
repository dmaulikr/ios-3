fastlane_version "1.33.6"

require 'yaml'

default_platform :ios

platform :ios do

desc "Submit a new alpha version to TestFlight"
desc "This action does the following:"
desc ""
desc "- 1) Ensures a clean git status"
desc "- 2) Increment the build number"
desc "- 3) Increment the version number, if option included"
desc "- 4) Get our mobile provisioning profile"
desc "- 5) Build and sign the app"
desc "- 6) Upload the ipa file to TestFlight"
desc "- 7) Commit the version bump"
desc "- Post a message to slack whether success or failure"

before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

    ensure_git_status_clean

    #TODO: ensure cocoapods are installed

end

lane :xcode do
  install_xcode_plugin(
    url: "https://github.com/fastlane/FixCode/releases/download/0.2.0/FixCode.xcplugin.zip"
  )
end

lane :alpha do |options|

      bump_type = options[:bump_type];

      version = get_version_number(xcodeproj: "Leo.xcodeproj")

      # Update version number if bump_type is provided.
      if bump_type
        increment_version_number bump_type: bump_type
      end

      #TODO: Determine appropriate way to use version without duplicating line of code.
      version = get_version_number(xcodeproj: "Leo.xcodeproj")

      # Get current version number

      # Next sections lifted and modified from https://github.com/artsy/eidolon/blob/9959ad473d49bf3ed2bcd5f897d0ff5d688f3d15/fastlane/Fastfile

      # Increment build number to current date
      build_number = Time.new.strftime("%Y.%m.%d.%H.%M")
      increment_build_number build_number: build_number

      # Generate release notes from CHANGELOG
      changelog_filename = '../CHANGELOG.yml'
      changelog_yaml = YAML.load_file(changelog_filename)
      release_notes = changelog_yaml['upcoming'].map{ |note| note.prepend '- ' }.join("\n")

      # Add a changelog entry for this version

      changelog_contents = File.read(changelog_filename)
      existing_releases = changelog_contents.split('releases:').last
      this_release = changelog_yaml['upcoming'].map{ |note| note.prepend '  ' }.join("\n")
      changelog_contents = <<-EOS
    upcoming:
    releases:
    - version: #{version}
      build: #{build_number}
      date: #{Time.new.strftime("%B %d %Y")}
      notes:
    #{this_release}
    #{existing_releases}
    EOS

      File.open(changelog_filename, 'w') { |file| file.puts changelog_contents }

    #snapshot (eventually add this for speed.)

    #cert (eventually add this in when we have more developers.)

    # Ensure we have the mobile provisioning profiles
    sigh(
      output_path: "./fastlane_build",
      filename: "com.leohealth.leo.alpha.mobileprovision"
    )

    # Build and sign app
    gym(
      scheme: "Leo Alpha",
      workspace: "Leo.xcworkspace",
      output_directory: "./fastlane_build",
      output_name: "Leo-Alpha.ipa",
      include_symbols: true,
      clean: true
    )

    # Push our build to iTunesConnect
    pilot(
      ipa: "./fastlane_build/Leo-Alpha.ipa",
      skip_submission: true
    )

    # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts

    # Tag release and push to Github
    commit_version_bump message: "Deploying version #{version}.", force: true
    add_git_tag(
      grouping: 'fastlane-builds',
      prefix: 'v',
      build_number: "#{version}.#{build_number}"
    )
  end

  lane :testflight do |options|

      bump_type = options[:bump_type];

      version = get_version_number(xcodeproj: "Leo.xcodeproj")

      # Update version number if bump_type is provided.
      if bump_type
        increment_version_number bump_type: bump_type
      end

      #TODO: Determine appropriate way to use version without duplicating line of code.
      version = get_version_number(xcodeproj: "Leo.xcodeproj")

      # Get current version number

      # Next sections lifted and modified from https://github.com/artsy/eidolon/blob/9959ad473d49bf3ed2bcd5f897d0ff5d688f3d15/fastlane/Fastfile

      # Increment build number to current date
      build_number = Time.new.strftime("%Y.%m.%d.%H.%M")
      increment_build_number build_number: build_number

      # Generate release notes from CHANGELOG
      changelog_filename = '../CHANGELOG.yml'
      changelog_yaml = YAML.load_file(changelog_filename)
      release_notes = changelog_yaml['upcoming'].map{ |note| note.prepend '- ' }.join("\n")

      # Add a changelog entry for this version

      changelog_contents = File.read(changelog_filename)
      existing_releases = changelog_contents.split('releases:').last
      this_release = changelog_yaml['upcoming'].map{ |note| note.prepend '  ' }.join("\n")
      changelog_contents = <<-EOS
    upcoming:
    releases:
    - version: #{version}
      build: #{build_number}
      date: #{Time.new.strftime("%B %d %Y")}
      notes:
    #{this_release}
    #{existing_releases}
    EOS

      File.open(changelog_filename, 'w') { |file| file.puts changelog_contents }

    #snapshot (eventually add this for speed.)

    #cert (eventually add this in when we have more developers.)

    # Ensure we have the mobile provisioning profiles
    sigh(
      output_path: "./fastlane_build",
      filename: "com.leohealth.leo.testflight.mobileprovision"
    )

    # Build and sign app
    gym(
      scheme: "Leo TestFlight",
      workspace: "Leo.xcworkspace",
      output_directory: "./fastlane_build",
      output_name: "Leo-TestFlight.ipa",
      include_symbols: true,
      clean: true
    )

    # Push our build to iTunesConnect
    pilot(
      ipa: "./fastlane_build/Leo-TestFlight.ipa",
      skip_submission: true
    )

    # Make sure our directory is clean, except for changes Fastlane has made
    clean_build_artifacts

    # Tag release and push to Github
    commit_version_bump message: "Deploying version #{version}.", force: true
    add_git_tag(
      grouping: 'fastlane-builds',
      prefix: 'v',
      build_number: "#{version}.#{build_number}"
    )
  end

  desc "Deploy a new version to the App Store"
  # This still has to be worked through.

  lane :production do
    snapshot
    sigh
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    slack(
      message: "Successfully deployed new App Update."

      #TODO: Add release notes, versioning
    )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end

# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
